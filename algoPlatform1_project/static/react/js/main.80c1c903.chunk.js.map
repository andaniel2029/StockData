{"version":3,"sources":["redux/cake/cakeReducer.js","redux/cake/cakeTypes.js","redux/rootReducer.js","redux/store.js","components/CakeContainer.js","redux/cake/cakeActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","numOfCakes","cakeReducer","state","action","type","payload","rootReducer","combineReducers","cake","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","connect","dispatch","buyCake","number","props","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAEMA,EAAe,CACnBC,WAAY,IAcCC,EAXK,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACpD,OAAQA,EAAOC,MACb,ICRoB,WDQL,OAAO,eACjBF,EADU,CAEbF,WAAYE,EAAMF,WAAaG,EAAOE,UAGxC,QAAS,OAAOH,IEJLI,EALKC,0BAAgB,CAClCC,KAAMP,ICQOQ,EALDC,sBACZJ,EACAK,8BAAoBC,0BAAgBC,IAAQC,OCG9C,IAYeC,eAZS,SAAAb,GACtB,MAAO,CACLF,WAAYE,EAAMM,KAAKR,eAIA,SAAAgB,GACzB,MAAO,CACLC,QAAS,kBAAMD,EClBI,WAAiB,IAAhBE,EAAe,uDAAN,EAC/B,MAAO,CACLd,KJLoB,WIMpBC,QAASa,GDeeD,QAIbF,EArBf,SAAwBI,GACtB,OACE,6BACE,iDAAuBA,EAAMnB,WAA7B,KACA,4BAAQoB,QAASD,EAAMF,SAAvB,gBEoBSI,MAjBf,WACE,OACE,kBAAC,IAAD,CAAUZ,MAAOA,GACf,yBAAKa,UAAU,OAEb,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.80c1c903.chunk.js","sourcesContent":["import { BUY_CAKE } from './cakeTypes'\r\n\r\nconst initialState = {\r\n  numOfCakes: 10\r\n}\r\n\r\nconst cakeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case BUY_CAKE: return {\r\n      ...state,\r\n      numOfCakes: state.numOfCakes - action.payload\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default cakeReducer","export const BUY_CAKE = 'BUY_CAKE'","import { combineReducers } from 'redux'\r\nimport cakeReducer from './cake/cakeReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  cake: cakeReducer,\r\n\r\n})\r\n\r\nexport default rootReducer","  \r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger, thunk))\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { buyCake } from '../redux'\r\n\r\nfunction CakeContainer (props) {\r\n  return (\r\n    <div>\r\n      <h2>Number of cakes - {props.numOfCakes} </h2>\r\n      <button onClick={props.buyCake}>Buy Cake</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    numOfCakes: state.cake.numOfCakes\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    buyCake: () => dispatch(buyCake())\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CakeContainer)","  \r\nimport { BUY_CAKE } from './cakeTypes'\r\n\r\nexport const buyCake = (number = 1) => {\r\n  return {\r\n    type: BUY_CAKE,\r\n    payload: number\r\n  }\r\n}","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport './App.css'\r\nimport store from './redux/store'\r\nimport CakeContainer from './components/CakeContainer'\r\n// import HooksCakeContainer from './components/HooksCakeContainer'\r\n// import IceCreamContainer from './components/IceCreamContainer'\r\n// import NewCakeContainer from './components/NewCakeContainer'\r\n// import ItemContainer from './components/ItemContainer'\r\n//import UsersContainer from './components/UsersContainer'\r\n\r\nfunction App () {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className='App'>\r\n        \r\n        <CakeContainer />\r\n        {/* <ItemContainer cake />\r\n        <ItemContainer />\r\n        <NewCakeContainer />\r\n        <UsersContainer />\r\n        <HooksCakeContainer />\r\n        <IceCreamContainer /> */}\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n// import React, { useEffect, useState } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n// import { Container } from \"semantic-ui-react\"\r\n// import { StockData } from './components/StockData';\r\n// import { exampleRedux } from './components/exampleRedux'\r\n// import { Provider } from 'react-redux'\r\n// import store from './components/redux/store'\r\n// function App() {\r\n\r\n//   return (\r\n//     <Provider store={store}>\r\n//       <div className=\"App\">\r\n//       {/* <Container style={{marginTop: 40}}>\r\n//         <StockData />\r\n//       </Container> \r\n//       <StockData />*/}\r\n//         <exampleRedux />\r\n//       </div>\r\n//     </Provider>\r\n    \r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}