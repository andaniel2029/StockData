{"version":3,"sources":["logo.svg","components/StockDataDateForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StockDataDateForm","useState","Date","startDate","setStartDate","endDate","setEndDate","stockData","setStockData","ticker","activeItemDateMenu","setActiveItemDateMenu","handleStartDateClick","date","fetch","getFullYear","getMonth","getDate","then","response","json","data","handleDateClick","minusDays","name","currentDate","dateOffset","setTime","getTime","console","log","handleEndDateClick","Menu","Item","active","onClick","position","selected","maxDate","onChange","placeholderText","isClearable","showYearDropdown","scrollableMonthYearDropdown","List","Object","keys","map","key","index","close","Header","open","high","low","App","className","Container","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.55b7c52a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, {useState, useEffect, StockData} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { List, Header, Form, Input, Button, Container, Icon, Menu } from \"semantic-ui-react\"\r\n\r\n\r\n\r\nexport const StockDataDateForm = () => {\r\n\r\n\tconst [startDate, setStartDate] = useState(new Date(2020,7,1,0,0,0,0));\r\n\tconst [endDate, setEndDate] = useState(new Date());\r\n\tconst [stockData, setStockData] = useState([]);\r\n\tconst [ticker, setTicker] = useState('AAPL');\r\n\tconst [activeItemDateMenu, setActiveItemDateMenu] = useState('');\r\n\t// const currentDate = new Date();\r\n\t// useEffect(() => {\r\n\t// \tfetch(\"/get_stock_data/\"+startDate.getFullYear()+\"/\"+(startDate.getMonth()+1)+\"/\"+startDate.getDate()).then(response => \r\n\t// \tresponse.json().then(data => {\r\n\t// \t\t//console.log(Object.keys(data));\r\n\t// \t\tsetStockData(data);\r\n\t// \t})\r\n\t// \t)\r\n\t// }, [])\r\n\r\n\tfunction handleStartDateClick(date) {\r\n\t\tif (date != startDate) {\r\n\t\t\tsetStartDate(date)\r\n\t\t}\r\n\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t  }\r\n\t\r\n\tfunction handleDateClick(minusDays, name) {\r\n\t\tsetActiveItemDateMenu(name)\r\n\t\t\r\n\t\tvar currentDate = new Date();\r\n\t\tvar dateOffset = (24*60*60*1000) * minusDays; //5 days\r\n\t\tvar newDate = currentDate.setTime(currentDate.getTime() - dateOffset);\r\n\t\t//currentDate.setTime(currentDate.getTime() - dateOffset);\r\n\t\tconsole.log(minusDays);\r\n\t\tconsole.log(\"The old month is: \"+(currentDate.getMonth()+1)+\" the old day is: \"+currentDate.getDate() );\r\n\t\t//console.log(\"The new month is: \"+(newDate.getMonth()+1)+\" the new day is: \"+newDate.getDate() );\r\n\t\tsetStartDate(currentDate);\r\n\t\tconsole.log(\"the start month is \"+(currentDate.getMonth()+1)+\" The start day is: \"+currentDate.getDate())\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+currentDate.getFullYear()+\"/\"+(currentDate.getMonth()+1)+\"/\"+currentDate.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t); \r\n\t}\r\n\r\n\tfunction handleEndDateClick(date) {\r\n\t\tsetEndDate(date)\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+startDate.getFullYear()+\"/\"+(startDate.getMonth()+1)+\"/\"+startDate.getDate()+\"/\"+date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t}\r\n\r\n\r\n\tfunction handleTickerFormSubmit() {\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+startDate.getFullYear()+\"/\"+(startDate.getMonth()+1)+\"/\"+startDate.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t}\r\n\r\n\r\n\tconsole.log(startDate)\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* <Form>\r\n\t\t\t\t <Form.Group>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\tplaceholder=\"Add ticker ex) APPL\"\r\n\t\t\t\t\t\t// name='InputtedTicker' \r\n\t\t\t\t\t\tvalue={ticker}\r\n\t\t\t\t\t\tonChange={e => setTicker(e.target.value)}\r\n\t\t\t\t\t\tisClearable>\r\n\t\t\t\t\t</Form.Input>\r\n\t\t\t\t\t<Form.Button \r\n\t\t\t\t\t\tanimated \r\n\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\tonClick={\r\n\t\t\t\t\t\t\thandleTickerFormSubmit()\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t<Form.Button.Content visible>Add</Form.Button.Content>\r\n\t\t\t\t\t\t<Form.Button.Content hidden>\r\n\t\t\t\t\t\t\t<Icon name='arrow right' />\r\n\t\t\t\t\t\t</Form.Button.Content>\r\n\t\t\t\t\t</Form.Button>\r\n\t\t\t\t</Form.Group> */}\r\n\r\n\r\n\r\n\t\t\t\t{/* <Form.Field>\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<div class=\"equal width row\">\r\n\t\t\t\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t\t\t\t<Form.Input \r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Add ticker ex) APPL\" \r\n\t\t\t\t\t\t\t\t\tvalue={ticker}\r\n\t\t\t\t\t\t\t\t\tonClick={e => setTicker(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tisClearable\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Form.Button animated primary onClick={handleTickerFormSubmit()}>\r\n\t\t\t\t\t\t\t\t\t<Form.Button.Content visible>Add</Form.Button.Content>\r\n\t\t\t\t\t\t\t\t\t<Form.Button.Content hidden>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name='arrow right' />\r\n\t\t\t\t\t\t\t\t\t</Form.Button.Content>\r\n\t\t\t\t\t\t\t\t</Form.Button>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Form.Field> \t\t\r\n\r\n\t\t\t</Form> */}\r\n\t\t\t<Menu>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='5d'\r\n\t\t\t\tactive={activeItemDateMenu === '5d'}\r\n\t\t\t\tonClick={() => handleDateClick(5, '5d')}\r\n\t\t\t\t>\r\n\t\t\t\t5 d\r\n\t\t\t\t</Menu.Item>\r\n\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='1m'\r\n\t\t\t\tactive={activeItemDateMenu === '1m'}\r\n\t\t\t\tonClick={() => handleDateClick(30, '1m')}\r\n\t\t\t\t>\r\n\t\t\t\t1 m\r\n\t\t\t\t</Menu.Item>\r\n\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='6m'\r\n\t\t\t\tactive={activeItemDateMenu === '6m'}\r\n\t\t\t\tonClick={() => handleDateClick(180, '6m')}\r\n\t\t\t\t>\r\n\t\t\t\t6 m\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='1y'\r\n\t\t\t\tactive={activeItemDateMenu === '1y'}\r\n\t\t\t\tonClick={() => handleDateClick(365, '1y')}\r\n\t\t\t\t>\r\n\t\t\t\t1 y\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='StartDate'\r\n\t\t\t\tposition='right'\r\n\t\t\t\t>\r\n\t\t\t\tCustom:\r\n\t\t\t\t<DatePicker \r\n\t\t\t\tselected={startDate} \r\n\t\t\t\tmaxDate={new Date()} \r\n\t\t\t\tonChange={date => handleStartDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t\tTo: \r\n\t\t\t\t<DatePicker \r\n\t\t\t\tselected={endDate} \r\n\t\t\t\tmaxDate={new Date()}\r\n\t\t\t\tonChange={date => handleEndDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t</Menu>\r\n\t\t\t<p> Start Date: </p>\r\n\t\t\t<DatePicker \r\n\t\t\t\tselected={startDate} \r\n\t\t\t\tmaxDate={new Date()} \r\n\t\t\t\tonChange={date => handleStartDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t<p> End Date: </p>\r\n\t\t\t\r\n\t\t\t<DatePicker \r\n\t\t\t\tselected={endDate} \r\n\t\t\t\tmaxDate={new Date()}\r\n\t\t\t\tonChange={date => handleEndDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\r\n\t\t\t<List>\r\n\t\t\t\t{Object.keys(stockData).map(function(key,index) {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<List.Item key={stockData[key].close}>\r\n\t\t\t\t\t\t\t<Header>Date: {key}</Header>\r\n\t\t\t\t\t\t\t<p>Open: {stockData[key].open}</p>\r\n\t\t\t\t\t\t\t<p>High: {stockData[key].high}</p>\r\n\t\t\t\t\t\t\t<p>Low: {stockData[key].low}</p>\r\n\t\t\t\t\t\t\t<p>Close: {stockData[key].close}</p>\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n        \t</List>\r\n\r\n\t\t</div>\r\n\t\t\r\n\t\t\r\n\t);\r\n\r\n\r\n\r\n} \r\n   \r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { StockData } from './components/StockData';\nimport { Container } from \"semantic-ui-react\"\nimport { StockDataDateForm } from './components/StockDataDateForm';\n\nfunction App() {\n  // const [stockData, setStockData] = useState([]);\n\n  // useEffect(() => {\n  //   fetch(\"/get_stock_data\").then(response => \n  //     response.json().then(data => {\n  //       //console.log(Object.keys(data));\n  //       setStockData(data);\n  //     })\n  //   )\n  // }, [])\n  \n  return (\n    <div className=\"App\">\n      <Container style={{marginTop: 40}}>\n        <StockDataDateForm />\n        \n        {/* <StockData stockData={stockData} /> */}\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}