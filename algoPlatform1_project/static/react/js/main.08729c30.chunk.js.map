{"version":3,"sources":["logo.svg","components/StockDataDateForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StockDataDateForm","useState","Date","startDate","setStartDate","endDate","setEndDate","stockData","setStockData","ticker","setTicker","activeItemDateMenu","setActiveItemDateMenu","fakeStockData","fakeSize","chartNode","useRef","handleDateClick","minusDays","name","currentDate","dateOffset","setTime","getTime","fetch","getFullYear","getMonth","getDate","then","response","json","data","createBarChart","node","current","dataMax","max","yScale","scaleLinear","domain","range","select","selectAll","enter","append","exit","remove","style","attr","d","i","Menu","Form","Input","placeholder","value","onChange","e","target","isClearable","Button","animated","primary","onClick","Content","visible","hidden","Icon","Item","active","position","selected","maxDate","date","handleStartDateClick","placeholderText","showYearDropdown","scrollableMonthYearDropdown","handleEndDateClick","List","Object","keys","map","key","index","close","Header","open","high","low","ref","width","height","App","className","Container","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.08729c30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, {useState, useEffect, useRef} from 'react';\r\nimport '../App.css'\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { List, Header, Form, Input, Button, Container, Icon, Menu } from \"semantic-ui-react\"\r\nimport { scaleLinear } from 'd3-scale'\r\nimport { max } from 'd3-array'\r\nimport { select } from 'd3-selection'\r\n\r\nexport const StockDataDateForm = () => {\r\n\r\n\tconst [startDate, setStartDate] = useState(new Date(2020,7,1,0,0,0,0));\r\n\tconst [endDate, setEndDate] = useState(new Date());\r\n\tconst [stockData, setStockData] = useState([]);\r\n\tconst [ticker, setTicker] = useState('AAPL');\r\n\tconst [activeItemDateMenu, setActiveItemDateMenu] = useState('');\r\n\tconst [fakeStockData, setFakeStockDate] = useState([5,10,1,3])\r\n\tconst [fakeSize, setFakeSize] = useState([500,500])\r\n\tconst chartNode = useRef(null);\r\n\r\n\tfunction handleStartDateClick(date) {\r\n\t\tif (date !== startDate) {\r\n\t\t\tsetStartDate(date)\r\n\t\t}\r\n\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t\tcreateBarChart();\r\n\t  }\r\n\t\r\n\tfunction handleDateClick(minusDays, name) {\r\n\t\tsetActiveItemDateMenu(name)\r\n\t\t\r\n\t\tvar currentDate = new Date();\r\n\t\tvar dateOffset = (24*60*60*1000) * minusDays; //5 days\r\n\t\tvar newDate = currentDate.setTime(currentDate.getTime() - dateOffset);\r\n\t\tsetStartDate(currentDate);\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+currentDate.getFullYear()+\"/\"+(currentDate.getMonth()+1)+\"/\"+currentDate.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t); \r\n\t\tcreateBarChart();\r\n\t}\r\n\r\n\tfunction handleEndDateClick(date) {\r\n\t\tsetEndDate(date)\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+startDate.getFullYear()+\"/\"+(startDate.getMonth()+1)+\"/\"+startDate.getDate()+\"/\"+date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\t// var newJSON = (data) => {\r\n\t\t\t\t// \tObject.keys(data).map(function(key,index) {\r\n\t\t\t\t// \t\t\tnewJSON[\"date\"]=key;\r\n\t\t\t\t// \t\t\tnewJSON[\"open\"]=data[key].open;\r\n\t\t\t\t// \t\t\tnewJSON[\"high\"]=data[key].high;\r\n\t\t\t\t// \t\t\tnewJSON[\"low\"]=data[key].low;\r\n\t\t\t\t// \t\t\tnewJSON[\"close\"].data[key].close;\r\n\t\t\t\t// \t\t};\r\n\t\t\t\t\r\n\t\t\t\t// console.log(newJSON);\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t\tcreateBarChart();\r\n\t}\r\n\r\n\r\n\tfunction handleTickerFormSubmit() {\r\n\t\tfetch(\"/get_stock_data/\"+ticker+\"/\"+startDate.getFullYear()+\"/\"+(startDate.getMonth()+1)+\"/\"+startDate.getDate()+\"/\"+endDate.getFullYear()+\"/\"+(endDate.getMonth()+1)+\"/\"+endDate.getDate()).then(response => \r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tsetStockData(data);\r\n\t\t\t})\r\n\t\t\t)\r\n\t\tcreateBarChart();\r\n\t}\r\n\r\n\r\n\tfunction createBarChart() {\r\n\t\tconst node = chartNode.current\r\n\t\tconst dataMax = max(fakeStockData)\r\n\t\tconst yScale = scaleLinear()\r\n\t\t   .domain([0, dataMax])\r\n\t\t   .range([0, fakeSize[1]])\r\n\r\n\t\tselect(node)\r\n\t\t\t.selectAll('rect')\r\n\t\t\t.data(fakeStockData)\r\n\t\t\t.enter()\r\n\t\t\t.append('rect')\r\n\t\t\r\n\t\tselect(node)\r\n\t\t\t.selectAll('rect')\r\n\t\t\t.data(fakeStockData)\r\n\t\t\t.exit()\r\n\t\t\t.remove()\r\n\t\t\r\n\t\tselect(node)\r\n\t\t\t.selectAll('rect')\r\n\t\t\t.data(fakeStockData)\r\n\t\t\t.style('fill', '#fe9922')\r\n\t\t\t.attr('x', (d,i) => i * 25)\r\n\t\t\t.attr('y', d => fakeSize[1] - yScale(d))\r\n\t\t\t.attr('height', d => yScale(d))\r\n\t\t\t.attr('width', 25)\r\n\t }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Menu>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<Input \r\n\t\t\t\t\t\tplaceholder=\"Add ticker ex) APPL\" \r\n\t\t\t\t\t\tvalue={ticker}\r\n\t\t\t\t\t\tname='ticker'\r\n\t\t\t\t\t\tonChange={(e) => setTicker(e.target.value)}\r\n\t\t\t\t\t\tisClearable\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button animated primary onClick={handleTickerFormSubmit}>\r\n\t\t\t\t\t\t<Button.Content visible>Add</Button.Content>\r\n\t\t\t\t\t\t<Button.Content hidden>\r\n\t\t\t\t\t\t\t<Icon name='arrow right' />\r\n\t\t\t\t\t\t</Button.Content>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form>\r\n\t\t\t\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='5d'\r\n\t\t\t\tactive={activeItemDateMenu === '5d'}\r\n\t\t\t\tonClick={() => handleDateClick(5, '5d')}\r\n\t\t\t\t>\r\n\t\t\t\t5 d\r\n\t\t\t\t</Menu.Item>\r\n\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='1m'\r\n\t\t\t\tactive={activeItemDateMenu === '1m'}\r\n\t\t\t\tonClick={() => handleDateClick(30, '1m')}\r\n\t\t\t\t>\r\n\t\t\t\t1 m\r\n\t\t\t\t</Menu.Item>\r\n\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='6m'\r\n\t\t\t\tactive={activeItemDateMenu === '6m'}\r\n\t\t\t\tonClick={() => handleDateClick(180, '6m')}\r\n\t\t\t\t>\r\n\t\t\t\t6 m\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='1y'\r\n\t\t\t\tactive={activeItemDateMenu === '1y'}\r\n\t\t\t\tonClick={() => handleDateClick(365, '1y')}\r\n\t\t\t\t>\r\n\t\t\t\t1 y\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\tname='StartDate'\r\n\t\t\t\tposition='right'\r\n\t\t\t\t>\r\n\t\t\t\tCustom:\r\n\t\t\t\t<DatePicker \r\n\t\t\t\tselected={startDate} \r\n\t\t\t\tmaxDate={new Date()} \r\n\t\t\t\tonChange={date => handleStartDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t\tTo: \r\n\t\t\t\t<DatePicker \r\n\t\t\t\tselected={endDate} \r\n\t\t\t\tmaxDate={new Date()}\r\n\t\t\t\tonChange={date => handleEndDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t</Menu>\r\n\t\t\t<List>\r\n\t\t\t\t{Object.keys(stockData).map(function(key,index) {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<List.Item key={stockData[key].close}>\r\n\t\t\t\t\t\t\t<Header>Date: {key}</Header>\r\n\t\t\t\t\t\t\t<p>Open: {stockData[key].open}</p>\r\n\t\t\t\t\t\t\t<p>High: {stockData[key].high}</p>\r\n\t\t\t\t\t\t\t<p>Low: {stockData[key].low}</p>\r\n\t\t\t\t\t\t\t<p>Close: {stockData[key].close}</p>\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n        \t</List>\r\n\t\t\t<div>\r\n\t\t\t<svg ref={chartNode}\r\n      \t\t\twidth={500} height={500}>\r\n      \t\t</svg>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t);\r\n} \r\n   \r\n\r\n\r\n{/* <p> Start Date: </p>\r\n\t\t\t<DatePicker \r\n\t\t\t\tselected={startDate} \r\n\t\t\t\tmaxDate={new Date()} \r\n\t\t\t\tonChange={date => handleStartDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\t\t\t<p> End Date: </p>\r\n\t\t\t\r\n\t\t\t<DatePicker \r\n\t\t\t\tselected={endDate} \r\n\t\t\t\tmaxDate={new Date()}\r\n\t\t\t\tonChange={date => handleEndDateClick(date)}\r\n\t\t\t\tplaceholderText='MM/DD/YYYY'\r\n\t\t\t\tisClearable\r\n\t\t\t\tshowYearDropdown\r\n\t\t\t\tscrollableMonthYearDropdown />\r\n\r\n\t\t\t<List>\r\n\t\t\t\t{Object.keys(stockData).map(function(key,index) {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<List.Item key={stockData[key].close}>\r\n\t\t\t\t\t\t\t<Header>Date: {key}</Header>\r\n\t\t\t\t\t\t\t<p>Open: {stockData[key].open}</p>\r\n\t\t\t\t\t\t\t<p>High: {stockData[key].high}</p>\r\n\t\t\t\t\t\t\t<p>Low: {stockData[key].low}</p>\r\n\t\t\t\t\t\t\t<p>Close: {stockData[key].close}</p>\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n        \t</List>\r\n\r\n\t\t</div> */}\r\n\r\n\r\n\t\t\r\n\t\t\t{/*\r\n\t\t\t\t <Form.Group>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\tplaceholder=\"Add ticker ex) APPL\"\r\n\t\t\t\t\t\t// name='InputtedTicker' \r\n\t\t\t\t\t\tvalue={ticker}\r\n\t\t\t\t\t\tonChange={e => setTicker(e.target.value)}\r\n\t\t\t\t\t\tisClearable>\r\n\t\t\t\t\t</Form.Input>\r\n\t\t\t\t\t<Form.Button \r\n\t\t\t\t\t\tanimated \r\n\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\tonClick={\r\n\t\t\t\t\t\t\thandleTickerFormSubmit()\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t<Form.Button.Content visible>Add</Form.Button.Content>\r\n\t\t\t\t\t\t<Form.Button.Content hidden>\r\n\t\t\t\t\t\t\t<Icon name='arrow right' />\r\n\t\t\t\t\t\t</Form.Button.Content>\r\n\t\t\t\t\t</Form.Button>\r\n\t\t\t\t</Form.Group> */}\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { StockData } from './components/StockData';\nimport { Container } from \"semantic-ui-react\"\nimport { StockDataDateForm } from './components/StockDataDateForm';\n\nfunction App() {\n  // const [stockData, setStockData] = useState([]);\n\n  // useEffect(() => {\n  //   fetch(\"/get_stock_data\").then(response => \n  //     response.json().then(data => {\n  //       //console.log(Object.keys(data));\n  //       setStockData(data);\n  //     })\n  //   )\n  // }, [])\n  \n  return (\n    <div className=\"App\">\n      <Container style={{marginTop: 40}}>\n        <StockDataDateForm />\n        \n        {/* <StockData stockData={stockData} /> */}\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}