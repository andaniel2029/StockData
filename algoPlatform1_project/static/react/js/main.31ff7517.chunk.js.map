{"version":3,"sources":["redux/dates/datesReducer.js","redux/dates/datesTypes.js","redux/tickers/tickerReducer.js","redux/tickers/tickerTypes.js","redux/rootReducer.js","redux/store.js","components/SelectTickerContainer.js","redux/tickers/tickerActions.js","components/SelectDatesFromMenuContainer.js","redux/dates/datesActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","tickers","datesReducer","state","action","type","startDate","payload","tickerReducer","rootReducer","combineReducers","tickersFromRootReducer","datesFromRootReducer","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","connect","dispatch","addTickerDispatch","newTicker","ticker","addTicker","props","useState","setNewTicker","Form","Input","placeholder","value","name","onChange","e","target","isClearable","Button","animated","primary","onClick","Content","visible","hidden","Icon","addStartDateDispatch","activeItemDateMenu","setActiveItemDateMenu","currentDate","Date","setTime","getTime","setStartDate","handleDateClick","minusDays","dateOffset","Menu","widths","Item","active","App","className","Grid","celled","Column","width","Row","stretched","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.31ff7517.chunk.js","sourcesContent":["import { ADD_START_DATE } from './datesTypes'\r\n\r\nconst initialState = {\r\n  tickers: 'AAPL'\r\n}\r\n\r\nconst datesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_START_DATE: return {\r\n      ...state,\r\n      startDate: action.payload\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default datesReducer","export const ADD_START_DATE = 'ADD_START_DATE'","import { ADD_TICKER } from './tickerTypes'\r\n\r\nconst initialState = {\r\n  tickers: 'AAPL'\r\n}\r\n\r\nconst tickerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKER: return {\r\n      ...state,\r\n      tickers: action.payload\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default tickerReducer","export const ADD_TICKER = 'ADD_TICKER'","import { combineReducers } from 'redux'\r\nimport datesReducer from './dates/datesReducer'\r\nimport tickerReducer from './tickers/tickerReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  tickersFromRootReducer: tickerReducer,\r\n  datesFromRootReducer: datesReducer\r\n\r\n})\r\n\r\nexport default rootReducer","  \r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger, thunk))\r\n)\r\n\r\nexport default store","import React, {useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTicker } from '../redux'\r\nimport { Input, Form, Icon, Button} from \"semantic-ui-react\"\r\n\r\n\r\nfunction SelectTickerContainer(props) {\r\n  const [newTicker, setNewTicker] = useState('')\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Input \r\n            placeholder=\"Add ticker ex) APPL\" \r\n            value={newTicker}\r\n            name='newTicker'\r\n            onChange={(e) => setNewTicker(e.target.value)}\r\n            isClearable\r\n        />\r\n        <Button animated primary onClick={(e) => props.addTickerDispatch(newTicker)}>\r\n            <Button.Content visible>Go!</Button.Content>\r\n            <Button.Content hidden>\r\n                <Icon name='arrow right' />\r\n            </Button.Content>\r\n        </Button>\r\n    </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tickers: state.tickersFromRootReducer.tickers\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addTickerDispatch: newTicker => dispatch(addTicker(newTicker))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectTickerContainer)","  \r\nimport { ADD_TICKER } from './tickerTypes'\r\n\r\nexport const addTicker = (ticker = 'AAPL') => {\r\n\r\n  return {\r\n    type: ADD_TICKER,\r\n    payload: ticker\r\n  }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addStartDate } from '../redux'\r\nimport { Input, Form, Icon, Button, Menu} from \"semantic-ui-react\"\r\n\r\n\r\n\r\nfunction SelectDatesFromMenuContainer(props) {\r\n    const [activeItemDateMenu, setActiveItemDateMenu] = useState('');\r\n    var currentDate = new Date();\r\n\tvar dateOffset = (24*60*60*1000) * 182; \r\n\tvar newDate = currentDate.setTime(currentDate.getTime() - dateOffset);\r\n\tconst [startDate, setStartDate] = useState(currentDate);\r\n\r\n    function handleDateClick(minusDays, name) {\r\n        setActiveItemDateMenu(name)\r\n        \r\n        var currentDate = new Date();\r\n        var dateOffset = (24*60*60*1000) * minusDays; \r\n        var newDate = currentDate.setTime(currentDate.getTime() - dateOffset);\r\n        setStartDate(currentDate);\r\n        props.addStartDateDispatch(startDate)\r\n        // getAndSetStockData(ticker,currentDate,endDate) \r\n        // getAndSetFinancials(ticker);\r\n        // getAndSetEarnings(ticker);\r\n        }\r\n\r\n  return (\r\n    <div>\r\n        <Menu widths={4}>\r\n            <Menu.Item\r\n            name='5d'\r\n            active={activeItemDateMenu === '5d'}\r\n            onClick={() => handleDateClick(8, '5d')}\r\n            >\r\n            5 d\r\n            </Menu.Item>\r\n            <Menu.Item\r\n            name='1m'\r\n            active={activeItemDateMenu === '1m'}\r\n            onClick={() => handleDateClick(30, '1m')}\r\n            >\r\n            1 m\r\n            </Menu.Item>\r\n            \r\n            <Menu.Item\r\n            name='6m'\r\n            active={activeItemDateMenu === '6m'}\r\n            onClick={() => handleDateClick(180, '6m')}\r\n            >\r\n            6 m\r\n            </Menu.Item>\r\n            \r\n            <Menu.Item\r\n            name='1y'\r\n            active={activeItemDateMenu === '1y'}\r\n            onClick={() => handleDateClick(365, '1y')}\r\n            >\r\n            1 y\r\n            </Menu.Item>\r\n            \r\n        </Menu>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    startDate: state.datesFromRootReducer.startDate\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addStartDateDispatch: startDate => dispatch(addStartDate(startDate))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectDatesFromMenuContainer)","  \r\nimport { ADD_START_DATE } from './datesTypes'\r\n\r\nexport const addStartDate = (date) => {\r\n\r\n  return {\r\n    type: ADD_START_DATE,\r\n    payload: date\r\n  }\r\n}","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport './App.css'\r\nimport store from './redux/store'\r\nimport SelectTickerContainer from './components/SelectTickerContainer'\r\nimport SelectDatesFromMenuContainer from './components/SelectDatesFromMenuContainer'\r\nimport { Grid} from \"semantic-ui-react\"\r\n// import HooksCakeContainer from './components/HooksCakeContainer'\r\n// import IceCreamContainer from './components/IceCreamContainer'\r\n// import NewCakeContainer from './components/NewCakeContainer'\r\n// import ItemContainer from './components/ItemContainer'\r\n//import UsersContainer from './components/UsersContainer'\r\n\r\nfunction App () {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className='App'>\r\n        <Grid celled>\r\n          <Grid.Column width = {4}>\r\n            <Grid.Row stretched>\r\n              <SelectTickerContainer /><br/>\r\n              <SelectDatesFromMenuContainer />\r\n            </Grid.Row>\r\n            \r\n            \r\n          </Grid.Column>\r\n          <Grid.Column width = {12}>\r\n            <SelectTickerContainer />\r\n          </Grid.Column>\r\n        </Grid>\r\n        \r\n        \r\n        {/* <ItemContainer cake />\r\n        <ItemContainer />\r\n        <NewCakeContainer />\r\n        <UsersContainer />\r\n        <HooksCakeContainer />\r\n        <IceCreamContainer /> */}\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n// import React, { useEffect, useState } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n// import { Container } from \"semantic-ui-react\"\r\n// import { StockData } from './components/StockData';\r\n// import { exampleRedux } from './components/exampleRedux'\r\n// import { Provider } from 'react-redux'\r\n// import store from './components/redux/store'\r\n// function App() {\r\n\r\n//   return (\r\n//     <Provider store={store}>\r\n//       <div className=\"App\">\r\n//       {/* <Container style={{marginTop: 40}}>\r\n//         <StockData />\r\n//       </Container> \r\n//       <StockData />*/}\r\n//         <exampleRedux />\r\n//       </div>\r\n//     </Provider>\r\n    \r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}